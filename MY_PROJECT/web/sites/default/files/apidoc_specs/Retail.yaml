---
openapi: "3.0.0"
info:
  version: "0.0.1"
  title: "Retail API v1"
  description: "Retail API"
  contact:
    name: "Your Name"
    email: "youremail@example.org"
    url: "https://example.org"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"
servers:
- url: "https://charlesworthjess-eval-test.apigee.net/retail/v1"
  description: "Retail API v1"
tags:
- name: "categories"
  description: "Product Categories"
- name: "products"
  description: "Products"
- name: "orders"
  description: "Orders"
- name: "stores"
  description: "Stores"
security:
- apikey: []
paths:
  /categories:
    get:
      summary: "Get all categories"
      operationId: "getCategories"
      tags:
      - "categories"
      responses:
        "200":
          description: "Complete list of categories"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Categories"
        default:
          description: "unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /categories/{categoryId}:
    get:
      summary: "Get a specific category"
      operationId: "getCategoryById"
      tags:
      - "categories"
      parameters:
      - name: "categoryId"
        in: "path"
        required: true
        description: "category id"
        schema:
          type: "integer"
      responses:
        "200":
          description: "Selected category"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "404":
          description: "Category not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: "unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /stores:
    get:
      summary: "Get all stores"
      operationId: "getStores"
      tags:
      - "stores"
      responses:
        "200":
          description: "Complete list of stores"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stores"
        default:
          description: "unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /stores/{storeId}:
    get:
      summary: "Get a specific store"
      operationId: "getStoreById"
      tags:
      - "stores"
      parameters:
      - name: "storeId"
        in: "path"
        required: true
        description: "store id"
        schema:
          type: "string"
      responses:
        "200":
          description: "Selected store"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Store"
        "404":
          description: "Store not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: "unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /products:
    get:
      summary: "Get all products"
      operationId: "getProducts"
      tags:
      - "products"
      responses:
        "200":
          description: "Complete list of products"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Products"
        default:
          description: "unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /products/{productId}:
    get:
      summary: "Get a specific product"
      operationId: "getProductById"
      tags:
      - "products"
      parameters:
      - name: "productId"
        in: "path"
        required: true
        description: "product id"
        schema:
          type: "string"
      responses:
        "200":
          description: "Selected product"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: "Product not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: "unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: "Update a specific product"
      description: "Only overall_rating can be changed, and it must be a number."
      operationId: "updateProductById"
      tags:
      - "products"
      parameters:
      - name: "productId"
        in: "path"
        required: true
        description: "product id"
        schema:
          type: "string"
      requestBody:
        description: "Product fields to update"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductForUpdate"
      responses:
        "200":
          description: "Returns the request product update fields"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductForUpdate"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "Product not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: "unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /orders:
    post:
      summary: "Create a new order"
      operationId: "createOrder"
      tags:
      - "orders"
      requestBody:
        description: "New order fields (freeform)"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: "Order created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewOrderResponse"
        default:
          description: "unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /orders/{orderId}:
    get:
      summary: "Get a specific order"
      operationId: "getOrderById"
      tags:
      - "orders"
      parameters:
      - name: "orderId"
        in: "path"
        required: true
        description: "order id"
        schema:
          type: "string"
      responses:
        "200":
          description: "Selected order"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          description: "Order not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: "unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: "Delete a specific order"
      operationId: "deleteOrderById"
      tags:
      - "orders"
      parameters:
      - name: "orderId"
        in: "path"
        required: true
        description: "order id"
        schema:
          type: "string"
      responses:
        "200":
          description: "Null response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteOrderResponse"
        "404":
          description: "Order not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: "unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  securitySchemes:
    apikey:
      type: "apiKey"
      in: "header"
      name: "apikey"
  schemas:
    Category:
      type: "object"
      description: "product category"
      required:
      - "color"
      - "id"
      - "name"
      properties:
        color:
          description: "use this color for displaying this category"
          type: "string"
        id:
          description: "integer id (used for access)"
          type: "integer"
          format: "int32"
          minimum: 0
        name:
          description: "category name"
          type: "string"
    Categories:
      type: "array"
      description: "array of product categories"
      items:
        $ref: "#/components/schemas/Category"
    Store:
      type: "object"
      description: "store"
      required:
      - "id"
      - "name"
      - "site_type"
      properties:
        adr:
          $ref: "#/components/schemas/Address"
        affiliate:
          description: "affiliate name"
          type: "string"
        id:
          description: "integer id (NOT used for access)"
          type: "integer"
          format: "int32"
          minimum: 0
        location:
          $ref: "#/components/schemas/Location"
        name:
          description: "store name"
          type: "string"
        phone:
          description: "store phone number"
          type: "string"
        site_type:
          description: "type of site"
          type: "string"
          enum:
          - "store"
          - "warehouse"
    Stores:
      type: "object"
      description: "list of stores"
      additionalProperties:
        $ref: "#/components/schemas/Store"
    Address:
      type: "object"
      description: "store address"
      required:
      - "addr1"
      - "city"
      - "country"
      - "state"
      - "zip"
      properties:
        addr1:
          description: "street address 1"
          type: "string"
        addr2:
          description: "street address 2"
          type: "string"
        city:
          description: "city"
          type: "string"
        country:
          description: "country"
          type: "string"
        state:
          description: "state"
          type: "string"
        zip:
          description: "zip code"
          type: "string"
    Location:
      type: "object"
      description: "store location"
      required:
      - "latitude"
      - "longitude"
      properties:
        latitude:
          description: "latitude in decimal degrees"
          type: "number"
          format: "float"
          minimum: -90
          maximum: 90
        longitude:
          description: "longitude in decimal degrees"
          type: "number"
          format: "float"
          minimum: -180
          maximum: 180
    Product:
      type: "object"
      description: "product"
      required:
      - "category"
      - "image"
      - "name"
      - "overall_rating"
      - "product_name"
      - "short_description"
      properties:
        category:
          description: "category name"
          type: "string"
        image:
          description: "image url"
          type: "string"
        name:
          description: "product id"
          type: "string"
        overall_rating:
          description: "rating of product"
          type: "number"
          format: "float"
        product_name:
          description: "descriptive product name"
          type: "string"
        short_description:
          description: "short paragraph describing the product"
          type: "string"
    ProductForUpdate:
      type: "object"
      description: "product (updateable fields)"
      required:
      - "overall_rating"
      properties:
        overall_rating:
          description: "rating of product"
          type: "number"
          format: "float"
    Products:
      type: "object"
      description: "list of products"
      additionalProperties:
        $ref: "#/components/schemas/Product"
    Order:
      type: "object"
      description: "order request"
      additionalProperties: true
    NewOrderResponse:
      type: "object"
      description: "order response"
      required:
      - "name"
      properties:
        name:
          description: "string id (used for access)"
          type: "string"
    DeleteOrderResponse:
      type: "object"
      nullable: true
    Error:
      type: "object"
      description: "error response"
      required:
      - "error"
      - "error_description"
      properties:
        error:
          type: "string"
        error_description:
          type: "string"
